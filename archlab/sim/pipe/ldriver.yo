                            | #######################################################################
                            | # Test for copying block of size 63;
                            | #######################################################################
0x000:                      | 	.pos 0
0x000: 30f41806000000000000 | main:	irmovq Stack, %rsp  	# Set up stack pointer
                            | 
                            | 	# Set up arguments for copy function and then invoke it
0x00a: 30f23f00000000000000 | 	irmovq $63, %rdx		# src and dst have 63 elements
0x014: 30f69803000000000000 | 	irmovq dest, %rsi	# dst array
0x01e: 30f78801000000000000 | 	irmovq src, %rdi	# src array
0x028: 803200000000000000   | 	call ncopy		 
0x031: 00                   | 	halt			# should halt with num nonzeros in %rax
0x032:                      | StartFun:
                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Include your name and ID here.
                            | #
                            | # Describe how and why you modified the baseline code.
                            | #
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x032:                      | ncopy:
                            | 
                            | ##################################################################
                            | # You can modify this portion
                            | 	# Loop header
0x032: 6300                 | 	xorq %rax,%rax		# count = 0;
0x034: c0f2fcffffffffffffff | 	iaddq $-4, %rdx
0x03e: 711c01000000000000   | 	jle Remain			# if len < 0, goto Remain:
                            | 
0x047:                      | Loop:
0x047: 50a70000000000000000 | 	mrmovq (%rdi), %r10		# read val from src...
0x051: 50b70800000000000000 | 	mrmovq 8(%rdi), %r11	# read val from src...
0x05b: 50c71000000000000000 | 	mrmovq 16(%rdi), %r12	# read val from src...
0x065: 50d71800000000000000 | 	mrmovq 24(%rdi), %r13	# read val from src...
0x06f: 50e72000000000000000 | 	mrmovq 32(%rdi), %r14	# read val from src...
                            | 
0x079: 40a60000000000000000 | 	rmmovq %r10, (%rsi)		# ...and store it to dst
0x083: 62aa                 | 	andq %r10, %r10
0x085: 719800000000000000   | 	jle Npos1
0x08e: c0f00100000000000000 | 	iaddq $1, %rax		# count++
                            | 
0x098:                      | Npos1:
0x098: 40b60800000000000000 | 	rmmovq %r11, 8(%rsi)	# ...and store it to dst
0x0a2: 62bb                 | 	andq %r11, %r11
0x0a4: 71b700000000000000   | 	jle Npos2
0x0ad: c0f00100000000000000 | 	iaddq $1, %rax		# count++
                            | 
0x0b7:                      | Npos2:
0x0b7: 40c61000000000000000 | 	rmmovq %r12, 16(%rsi)	# ...and store it to dst
0x0c1: 62cc                 | 	andq %r12, %r12
0x0c3: 71d600000000000000   | 	jle Npos3
0x0cc: c0f00100000000000000 | 	iaddq $1, %rax		# count++
                            | 
0x0d6:                      | Npos3:
0x0d6: 40d61800000000000000 | 	rmmovq %r13, 24(%rsi)	# ...and store it to dst
0x0e0: 62dd                 | 	andq %r13, %r13
0x0e2: 71f500000000000000   | 	jle Npos4
0x0eb: c0f00100000000000000 | 	iaddq $1, %rax		# count++
                            | 
0x0f5:                      | Npos4:
                            | 
0x0f5: c0f72000000000000000 | 	iaddq $32, %rdi		# src++
0x0ff: c0f62000000000000000 | 	iaddq $32, %rsi		# dst++
0x109: c0f2fcffffffffffffff | 	iaddq $-4, %rdx
0x113: 764700000000000000   | 	jg Loop			# if len > 0, goto Loop:
                            | 
0x11c:                      | Remain:
0x11c: c0f20400000000000000 | 	iaddq $4, %rdx
0x126: 6222                 | 	andq %rdx, %rdx
0x128: 718101000000000000   | 	jle Done
0x131:                      | R_Loop:
0x131: 50a70000000000000000 | 	mrmovq (%rdi), %r10		# read val from src...
0x13b: c0f70800000000000000 | 	iaddq $8, %rdi			# src++
0x145: 40a60000000000000000 | 	rmmovq %r10, (%rsi)		# ...and store it to dst
0x14f: c0f60800000000000000 | 	iaddq $8, %rsi			# dst++
0x159: 60aa                 | 	addq %r10, %r10
0x15b: 716e01000000000000   | 	jle Npos5
0x164: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x16e:                      | Npos5:
0x16e: c0f2ffffffffffffffff | 	iaddq $-1, %rdx
0x178: 763101000000000000   | 	jg R_Loop
                            | 
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x181:                      | Done:
0x181: 90                   | 	ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x182:                      | End:
                            | #/* $end ncopy-ys */
0x182:                      | EndFun:
                            | 
                            | ###############################
                            | # Source and destination blocks 
                            | ###############################
0x188:                      | 	.align 8
0x188:                      | src:
0x188: ffffffffffffffff     | 	.quad -1
0x190: feffffffffffffff     | 	.quad -2
0x198: fdffffffffffffff     | 	.quad -3
0x1a0: fcffffffffffffff     | 	.quad -4
0x1a8: fbffffffffffffff     | 	.quad -5
0x1b0: faffffffffffffff     | 	.quad -6
0x1b8: f9ffffffffffffff     | 	.quad -7
0x1c0: f8ffffffffffffff     | 	.quad -8
0x1c8: 0900000000000000     | 	.quad 9
0x1d0: 0a00000000000000     | 	.quad 10
0x1d8: 0b00000000000000     | 	.quad 11
0x1e0: 0c00000000000000     | 	.quad 12
0x1e8: f3ffffffffffffff     | 	.quad -13
0x1f0: f2ffffffffffffff     | 	.quad -14
0x1f8: 0f00000000000000     | 	.quad 15
0x200: f0ffffffffffffff     | 	.quad -16
0x208: efffffffffffffff     | 	.quad -17
0x210: 1200000000000000     | 	.quad 18
0x218: 1300000000000000     | 	.quad 19
0x220: 1400000000000000     | 	.quad 20
0x228: 1500000000000000     | 	.quad 21
0x230: 1600000000000000     | 	.quad 22
0x238: 1700000000000000     | 	.quad 23
0x240: 1800000000000000     | 	.quad 24
0x248: e7ffffffffffffff     | 	.quad -25
0x250: e6ffffffffffffff     | 	.quad -26
0x258: e5ffffffffffffff     | 	.quad -27
0x260: 1c00000000000000     | 	.quad 28
0x268: e3ffffffffffffff     | 	.quad -29
0x270: e2ffffffffffffff     | 	.quad -30
0x278: e1ffffffffffffff     | 	.quad -31
0x280: 2000000000000000     | 	.quad 32
0x288: 2100000000000000     | 	.quad 33
0x290: deffffffffffffff     | 	.quad -34
0x298: 2300000000000000     | 	.quad 35
0x2a0: dcffffffffffffff     | 	.quad -36
0x2a8: 2500000000000000     | 	.quad 37
0x2b0: daffffffffffffff     | 	.quad -38
0x2b8: d9ffffffffffffff     | 	.quad -39
0x2c0: d8ffffffffffffff     | 	.quad -40
0x2c8: 2900000000000000     | 	.quad 41
0x2d0: d6ffffffffffffff     | 	.quad -42
0x2d8: d5ffffffffffffff     | 	.quad -43
0x2e0: d4ffffffffffffff     | 	.quad -44
0x2e8: 2d00000000000000     | 	.quad 45
0x2f0: 2e00000000000000     | 	.quad 46
0x2f8: 2f00000000000000     | 	.quad 47
0x300: d0ffffffffffffff     | 	.quad -48
0x308: cfffffffffffffff     | 	.quad -49
0x310: ceffffffffffffff     | 	.quad -50
0x318: cdffffffffffffff     | 	.quad -51
0x320: 3400000000000000     | 	.quad 52
0x328: 3500000000000000     | 	.quad 53
0x330: caffffffffffffff     | 	.quad -54
0x338: 3700000000000000     | 	.quad 55
0x340: 3800000000000000     | 	.quad 56
0x348: 3900000000000000     | 	.quad 57
0x350: 3a00000000000000     | 	.quad 58
0x358: c5ffffffffffffff     | 	.quad -59
0x360: 3c00000000000000     | 	.quad 60
0x368: 3d00000000000000     | 	.quad 61
0x370: 3e00000000000000     | 	.quad 62
0x378: 3f00000000000000     | 	.quad 63
0x380: fadebc0000000000     | 	.quad 0xbcdefa # This shouldn't get moved
                            | 
0x390:                      | 	.align 16
0x390:                      | Predest:
0x390: fadebc0000000000     | 	.quad 0xbcdefa
0x398:                      | dest:
0x398: abefcd0000000000     | 	.quad 0xcdefab
0x3a0: abefcd0000000000     | 	.quad 0xcdefab
0x3a8: abefcd0000000000     | 	.quad 0xcdefab
0x3b0: abefcd0000000000     | 	.quad 0xcdefab
0x3b8: abefcd0000000000     | 	.quad 0xcdefab
0x3c0: abefcd0000000000     | 	.quad 0xcdefab
0x3c8: abefcd0000000000     | 	.quad 0xcdefab
0x3d0: abefcd0000000000     | 	.quad 0xcdefab
0x3d8: abefcd0000000000     | 	.quad 0xcdefab
0x3e0: abefcd0000000000     | 	.quad 0xcdefab
0x3e8: abefcd0000000000     | 	.quad 0xcdefab
0x3f0: abefcd0000000000     | 	.quad 0xcdefab
0x3f8: abefcd0000000000     | 	.quad 0xcdefab
0x400: abefcd0000000000     | 	.quad 0xcdefab
0x408: abefcd0000000000     | 	.quad 0xcdefab
0x410: abefcd0000000000     | 	.quad 0xcdefab
0x418: abefcd0000000000     | 	.quad 0xcdefab
0x420: abefcd0000000000     | 	.quad 0xcdefab
0x428: abefcd0000000000     | 	.quad 0xcdefab
0x430: abefcd0000000000     | 	.quad 0xcdefab
0x438: abefcd0000000000     | 	.quad 0xcdefab
0x440: abefcd0000000000     | 	.quad 0xcdefab
0x448: abefcd0000000000     | 	.quad 0xcdefab
0x450: abefcd0000000000     | 	.quad 0xcdefab
0x458: abefcd0000000000     | 	.quad 0xcdefab
0x460: abefcd0000000000     | 	.quad 0xcdefab
0x468: abefcd0000000000     | 	.quad 0xcdefab
0x470: abefcd0000000000     | 	.quad 0xcdefab
0x478: abefcd0000000000     | 	.quad 0xcdefab
0x480: abefcd0000000000     | 	.quad 0xcdefab
0x488: abefcd0000000000     | 	.quad 0xcdefab
0x490: abefcd0000000000     | 	.quad 0xcdefab
0x498: abefcd0000000000     | 	.quad 0xcdefab
0x4a0: abefcd0000000000     | 	.quad 0xcdefab
0x4a8: abefcd0000000000     | 	.quad 0xcdefab
0x4b0: abefcd0000000000     | 	.quad 0xcdefab
0x4b8: abefcd0000000000     | 	.quad 0xcdefab
0x4c0: abefcd0000000000     | 	.quad 0xcdefab
0x4c8: abefcd0000000000     | 	.quad 0xcdefab
0x4d0: abefcd0000000000     | 	.quad 0xcdefab
0x4d8: abefcd0000000000     | 	.quad 0xcdefab
0x4e0: abefcd0000000000     | 	.quad 0xcdefab
0x4e8: abefcd0000000000     | 	.quad 0xcdefab
0x4f0: abefcd0000000000     | 	.quad 0xcdefab
0x4f8: abefcd0000000000     | 	.quad 0xcdefab
0x500: abefcd0000000000     | 	.quad 0xcdefab
0x508: abefcd0000000000     | 	.quad 0xcdefab
0x510: abefcd0000000000     | 	.quad 0xcdefab
0x518: abefcd0000000000     | 	.quad 0xcdefab
0x520: abefcd0000000000     | 	.quad 0xcdefab
0x528: abefcd0000000000     | 	.quad 0xcdefab
0x530: abefcd0000000000     | 	.quad 0xcdefab
0x538: abefcd0000000000     | 	.quad 0xcdefab
0x540: abefcd0000000000     | 	.quad 0xcdefab
0x548: abefcd0000000000     | 	.quad 0xcdefab
0x550: abefcd0000000000     | 	.quad 0xcdefab
0x558: abefcd0000000000     | 	.quad 0xcdefab
0x560: abefcd0000000000     | 	.quad 0xcdefab
0x568: abefcd0000000000     | 	.quad 0xcdefab
0x570: abefcd0000000000     | 	.quad 0xcdefab
0x578: abefcd0000000000     | 	.quad 0xcdefab
0x580: abefcd0000000000     | 	.quad 0xcdefab
0x588: abefcd0000000000     | 	.quad 0xcdefab
0x590:                      | Postdest:
0x590: bcfade0000000000     | 	.quad 0xdefabc
                            | 
0x598:                      | .align 8
                            | # Run time stack
0x598: 0000000000000000     | 	.quad 0
0x5a0: 0000000000000000     | 	.quad 0
0x5a8: 0000000000000000     | 	.quad 0
0x5b0: 0000000000000000     | 	.quad 0
0x5b8: 0000000000000000     | 	.quad 0
0x5c0: 0000000000000000     | 	.quad 0
0x5c8: 0000000000000000     | 	.quad 0
0x5d0: 0000000000000000     | 	.quad 0
0x5d8: 0000000000000000     | 	.quad 0
0x5e0: 0000000000000000     | 	.quad 0
0x5e8: 0000000000000000     | 	.quad 0
0x5f0: 0000000000000000     | 	.quad 0
0x5f8: 0000000000000000     | 	.quad 0
0x600: 0000000000000000     | 	.quad 0
0x608: 0000000000000000     | 	.quad 0
0x610: 0000000000000000     | 	.quad 0
                            | 
0x618:                      | Stack:
